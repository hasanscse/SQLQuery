
ALTER PROC [dbo].[FSP_PRODUCT_PURCHASE_DETAILS_EDIT]
@PURCHASE_INVOICE_NO NVARCHAR(30),
@PRODUCT_CODE NVARCHAR(30),
@UNIT_ID NVARCHAR(30),
@QUANTITY NVARCHAR(30),  
@TOTAL_PURCHASED_PRICE DECIMAL(18,2),
@PURCHASED_PRICE DECIMAL(18,2),
@SERIAL_AVAILABLE NVARCHAR(30),
@COMPANY_ID NVARCHAR(30),
@BRANCH_ID NVARCHAR(30)
AS

INSERT INTO PURCHASE_DETAILS
(
PURCHASE_INVOICE_NO,
PRODUCT_CODE,
UNIT_ID,
QUANTITY, 
TOTAL_PURCHASED_PRICE,
SERIAL_AVAILABLE,
COMPANY_ID,
BRANCH_ID
)
VALUES
(
@PURCHASE_INVOICE_NO,
@PRODUCT_CODE,
@UNIT_ID,
@QUANTITY, 
@TOTAL_PURCHASED_PRICE,
@SERIAL_AVAILABLE,
@COMPANY_ID,
@BRANCH_ID
)
declare @PURCHASE_QUANTITY decimal(18,2)
declare @SALES_QUANTITY decimal(18,2)
declare @NEW_QUANTITY decimal(18,2)
declare @PURCHASE_PRICE decimal(18,2)
set @PURCHASE_PRICE = (@TOTAL_PURCHASED_PRICE/@QUANTITY)

--set @SALES_QUANTITY = (

--select SUM(sd.QUANTITY) from SALES s
--inner join SALES_DETAILS sd on s.SALES_INVOICE_NO=sd.SALES_INVOICE_NO
--and s.COMPANY_ID=sd.COMPANY_ID and s.BRANCH_ID=sd.BRANCH_ID
--where PRODUCT_CODE=@PRODUCT_CODE and s.CANCEL_FLAG=0
--) 

--set @PURCHASE_QUANTITY = (

--select SUM(sd.QUANTITY) from PURCHASE s
--inner join PURCHASE_DETAILS sd on s.PURCHASE_INVOICE_NO=sd.PURCHASE_INVOICE_NO
--and s.COMPANY_ID=sd.COMPANY_ID and s.BRANCH_ID=sd.BRANCH_ID
--where PRODUCT_CODE=@PRODUCT_CODE and s.CANCEL_FLAG=0
--) 

--set @NEW_QUANTITY = (ISNULL(@PURCHASE_QUANTITY,0)- ISNULL(@SALES_QUANTITY,0))

UPDATE PRODUCT 
SET STOCK_QUANTITY = CURRENT_STOCK_QUANTITY,
	TOTAL_STOCK_AMOUNT=(@PURCHASE_PRICE*CURRENT_STOCK_QUANTITY),--(@QUANTITY*),
	PURCHASED_PRICE=@PURCHASE_PRICE
	--,PURCHASE_PRICE = (@TOTAL_PURCHASED_PRICE/@QUANTITY)



 
--select
--aa.PRODUCT_CODE,
----(aa.CURRENT_STOCK_QUANTITY+aa.OPENING_STOCK_QUANTITY) 
--aa.STOCK_QUANTITY as CURRENT_STOCK_QUANTITY,--se.TOTAL_SALES_EX_QTY
--aa.PRODUCT_NAME,aa.OPENING_STOCK_QUANTITY,
--(aa.TOTAL_STOCK_OUT_QTY- aa.CURRENT_STOCK_QUANTITY+aa.OPENING_STOCK_QUANTITY)PREVIOUS_STOCK_QTY,
--ISNULL(aa.TOTAL_PURCHASE_QTY,0) TOTAL_PURCHASE_QTY,aa.TOTAL_SALES_QTY,

--aa.CURRENT_STOCK_QUANTITY as END_STOCK_QTY,
--aa.TOTAL_PURCHASED_PRICE,
--aa.TOTAL_SALES_PRICE,aa.TOTAL_SALES_RETURN_QTY,aa.TOTAL_STOCK_OUT_QTY,aa.TOTAL_SALES_EX_QTY,
--(aa.TOTAL_BAD_STOCK_QTY - ISNULL(TOTAL_DAMAGE_TO_STOCK_QUANTITY,0)) AS TOTAL_BAD_STOCK_QTY

--,

--aa.COMPANY_ID,aa.BRANCH_ID
from
 -- aa start
(

select 
a.PRODUCT_NAME,a.PRODUCT_CODE,ISNULL(a.TOTAL_PURCHASE_QTY,0) TOTAL_PURCHASE_QTY,a.OPENING_STOCK_QUANTITY,
TOTAL_SALES_QTY,TOTAL_SALES_EX_QTY,TOTAL_BAD_STOCK_QTY,
a.COMPANY_ID,a.BRANCH_ID,TOTAL_DAMAGE_TO_STOCK_QUANTITY,

-- main stock calculation
(ISNULL(a.TOTAL_PURCHASE_QTY,0)-ISNULL(b.TOTAL_SALES_QTY,0)
+ISNULL(TOTAL_SALES_RETURN_QTY,0)+ISNULL(TOTAL_SALES_EX_QTY,0)
-ISNULL(TOTAL_STOCK_OUT_QTY,0)-ISNULL(TOTAL_BAD_STOCK_QTY,0)
+ISNULL(TOTAL_DAMAGE_TO_STOCK_QUANTITY,0)
+ISNULL(OPENING_STOCK_QUANTITY,0) 
) 

CURRENT_STOCK_QUANTITY,

c.TOTAL_SALES_RETURN_QTY,
d.TOTAL_STOCK_OUT_QTY,a.TOTAL_PURCHASED_PRICE,b.TOTAL_SALES_PRICE,
a.STOCK_QUANTITY
from

(
-- product table
select
p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY,p.OPENING_STOCK_QUANTITY,RAW_MATERIALS_STATUS,BUYER_SUPPLIER_ID ,p.COMPANY_ID,p.BRANCH_ID,c.CATEGORY_ID,B.BRAND_ID,S.SUBCATEGORY_ID,
SUM(TOTAL_PURCHASE_QTY)TOTAL_PURCHASE_QTY,ISNULL(SUM(TOTAL_PURCHASED_PRICE),0)TOTAL_PURCHASED_PRICE


from
PRODUCT p
INNER JOIN
                      PRODUCT_CATEGORY C ON P.CATEGORY_ID = C.CATEGORY_ID 
                      and P.COMPANY_ID=C.COMPANY_ID
                      INNER JOIN
                      PRODUCT_SUBCATEGORY S ON P.SUBCATEGORY_ID = S.SUBCATEGORY_ID 
                      and  P.COMPANY_ID=S.COMPANY_ID
                      INNER JOIN
                      PRODUCT_BRAND B ON P.BRAND_ID = B.BRAND_ID
                      and P.COMPANY_ID=B.COMPANY_ID

						INNER JOIN COMPANY co
ON P.COMPANY_ID=co.COMPANY_ID

inner join BRANCH br on p.BRANCH_ID=br.BRANCH_ID and P.COMPANY_ID=br.COMPANY_ID

inner join PRODUCT_UNIT_TYPES u 
on p.UNIT_ID=u.UNIT_ID
 and  P.COMPANY_ID=u.COMPANY_ID
 
 -- purchase table
 
left outer join 
(select pd.PRODUCT_CODE,SUM(ISNULL(pd.QUANTITY,0)) as TOTAL_PURCHASE_QTY,SUM(TOTAL_PURCHASED_PRICE)TOTAL_PURCHASED_PRICE
 from PURCHASE pu
inner join PURCHASE_DETAILS pd
on  pu.PURCHASE_INVOICE_NO=pd.PURCHASE_INVOICE_NO
where 
--(CAST(CONVERT(varchar,pu.MAKE_DT, 106) AS datetime) BETWEEN 
--(CAST(CONVERT(varchar,@FROM_DATE, 106) AS datetime)) AND 
--(CAST(CONVERT(varchar,@TO_DATE, 106) AS datetime))) AND
pu.CANCEL_FLAG=0 and pu.COMPANY_ID=@COMPANY_ID and pd.BRANCH_ID=@BRANCH_ID
group by pd.PRODUCT_CODE
)pur
on p.PRODUCT_CODE=pur.PRODUCT_CODE 
group by p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY,
p.OPENING_STOCK_QUANTITY,RAW_MATERIALS_STATUS,BUYER_SUPPLIER_ID,p.COMPANY_ID,p.BRANCH_ID,
c.CATEGORY_ID,s.SUBCATEGORY_ID,b.BRAND_ID 

)a

-- sales table 
inner join

(
select 
p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY ,
ISNULL(SUM(sale.SALES_QUANTITY),0)TOTAL_SALES_QTY,
ISNULL(SUM(TOTAL_SALES_PRICE),0)TOTAL_SALES_PRICE
,p.COMPANY_ID,p.BRANCH_ID
from
PRODUCT p
left outer join 
(
select su.SALES_INVOICE_NO,sd.PRODUCT_CODE,ISNULL(sd.QUANTITY,0) 
as SALES_QUANTITY,(sd.QUANTITY*sd.SALES_PRICE)TOTAL_SALES_PRICE 
from SALES su
inner join SALES_DETAILS sd
on  su.SALES_INVOICE_NO=sd.SALES_INVOICE_NO and su.COMPANY_ID=sd.COMPANY_ID and su.BRANCH_ID=sd.BRANCH_ID
where 
 --(CAST(CONVERT(varchar,su.MAKE_DT, 106) AS datetime) BETWEEN 
--(CAST(CONVERT(varchar,@FROM_DATE, 106) AS datetime)) AND 
--(CAST(CONVERT(varchar,@TO_DATE, 106) AS datetime))) AND

su.CANCEL_FLAG=0 and su.COMPANY_ID=@COMPANY_ID and sd.BRANCH_ID=@BRANCH_ID 
-- stock history update
and sd.QUANTITY >0

)sale
on p.PRODUCT_CODE=sale.PRODUCT_CODE

group by p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY,p.COMPANY_ID,p.BRANCH_ID
)b


on a.PRODUCT_CODE=b.PRODUCT_CODE and
a.COMPANY_ID =b.COMPANY_ID and a.BRANCH_ID=b.BRANCH_ID
-- sales return table
inner join
(
select 
p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY ,
ISNULL(SUM(sale.SALES_RETURN_QUANTITY),0)TOTAL_SALES_RETURN_QTY,
ISNULL(SUM(TOTAL_SALES_RETURN_PRICE),0)TOTAL_SALES_RETURN_PRICE
,p.COMPANY_ID,p.BRANCH_ID
from
PRODUCT p
left outer join 
(
select su.SALES_RETURN_NO,sd.PRODUCT_CODE,ISNULL(sd.QUANTITY,0) as 
SALES_RETURN_QUANTITY,(sd.QUANTITY*sd.SALES_PRICE)TOTAL_SALES_RETURN_PRICE 
from SALES_RETURN su
inner join SALES_RETURN_DETAILS sd
on  su.SALES_RETURN_NO=sd.SALES_RETURN_NO and su.COMPANY_ID=sd.COMPANY_ID and su.BRANCH_ID=sd.BRANCH_ID
where 
 --(CAST(CONVERT(varchar,su.MAKE_DT, 106) AS datetime) BETWEEN 
--(CAST(CONVERT(varchar,@FROM_DATE, 106) AS datetime)) AND 
--(CAST(CONVERT(varchar,@TO_DATE, 106) AS datetime))) AND

su.CANCEL_FLAG=0 and su.COMPANY_ID=@COMPANY_ID and sd.BRANCH_ID=@BRANCH_ID 
and su.REMARKS = 'Sales Return'

)sale
on p.PRODUCT_CODE=sale.PRODUCT_CODE


group by p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY,p.COMPANY_ID,p.BRANCH_ID
)c

on b.PRODUCT_CODE=c.PRODUCT_CODE
and
b.COMPANY_ID =c.COMPANY_ID and b.BRANCH_ID=c.BRANCH_ID

-- sales exchange

inner join
(
select 
p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY ,
ISNULL(SUM(sale_excng.SALES_RETURN_QUANTITY),0)TOTAL_SALES_EX_QTY,
ISNULL(SUM(TOTAL_SALES_RETURN_PRICE),0)TOTAL_SALES_RETURN_PRICE
,p.COMPANY_ID,p.BRANCH_ID
from
PRODUCT p
left outer join 
(
select su.SALES_RETURN_NO,sd.PRODUCT_CODE,ISNULL(sd.QUANTITY,0) as 
SALES_RETURN_QUANTITY,(sd.QUANTITY*sd.SALES_PRICE)TOTAL_SALES_RETURN_PRICE 
from SALES_RETURN su
inner join SALES_RETURN_DETAILS sd
on  su.SALES_RETURN_NO=sd.SALES_RETURN_NO and su.COMPANY_ID=sd.COMPANY_ID and su.BRANCH_ID=sd.BRANCH_ID
where 
 --(CAST(CONVERT(varchar,su.MAKE_DT, 106) AS datetime) BETWEEN 
--(CAST(CONVERT(varchar,@FROM_DATE, 106) AS datetime)) AND 
--(CAST(CONVERT(varchar,@TO_DATE, 106) AS datetime))) AND

su.CANCEL_FLAG=0 and su.COMPANY_ID=@COMPANY_ID and sd.BRANCH_ID=@BRANCH_ID 
and su.REMARKS = 'Exchange Product'

)sale_excng
on p.PRODUCT_CODE=sale_excng.PRODUCT_CODE


group by p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY,p.COMPANY_ID,p.BRANCH_ID
)se

on c.PRODUCT_CODE=se.PRODUCT_CODE
and
c.COMPANY_ID =se.COMPANY_ID and c.BRANCH_ID=se.BRANCH_ID
-- stock out table
inner join
(
select 
p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY ,
ISNULL(SUM(sale.STOCK_OUT_QUANTITY),0)TOTAL_STOCK_OUT_QTY,
ISNULL(SUM(TOTAL_STOCK_OUT_PRICE),0)TOTAL_STOCK_OUT_PRICE
,p.COMPANY_ID,p.BRANCH_ID
from
PRODUCT p
left outer join 
(
select su.STOCK_OUT_INVOICE_NO,sd.PRODUCT_CODE,ISNULL(sd.QUANTITY,0) as STOCK_OUT_QUANTITY,(sd.QUANTITY*sd.STOCK_OUT_PRICE)TOTAL_STOCK_OUT_PRICE 
from STOCK_OUT su
inner join STOCK_OUT_DETAILS sd
on  su.STOCK_OUT_INVOICE_NO=sd.STOCK_OUT_INVOICE_NO and su.COMPANY_ID=sd.COMPANY_ID and su.BRANCH_ID=sd.BRANCH_ID
where 
 --(CAST(CONVERT(varchar,su.MAKE_DT, 106) AS datetime) BETWEEN 
--(CAST(CONVERT(varchar,@FROM_DATE, 106) AS datetime)) AND 
--(CAST(CONVERT(varchar,@TO_DATE, 106) AS datetime))) AND

su.CANCEL_FLAG=0 and su.COMPANY_ID=@COMPANY_ID and sd.BRANCH_ID=@BRANCH_ID 

)sale
on p.PRODUCT_CODE=sale.PRODUCT_CODE

group by p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY,p.COMPANY_ID,p.BRANCH_ID
)d

on se.PRODUCT_CODE=d.PRODUCT_CODE

and
se.COMPANY_ID =d.COMPANY_ID and se.BRANCH_ID=d.BRANCH_ID


-- stock damage table
inner join
(
select 
p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY ,
ISNULL(SUM(badstock.STOCK_OUT_QUANTITY),0)TOTAL_BAD_STOCK_QTY,
ISNULL(SUM(TOTAL_STOCK_OUT_PRICE),0)TOTAL_STOCK_OUT_PRICE
,p.COMPANY_ID,p.BRANCH_ID
from
PRODUCT p
left outer join 
(
select su.STOCK_TO_BADSTOCK_INVOICE_NO,sd.PRODUCT_CODE,ISNULL(sd.QUANTITY,0) as STOCK_OUT_QUANTITY,(sd.QUANTITY*sd.PURCHASE_PRICE)TOTAL_STOCK_OUT_PRICE 
from STOCK_TO_BADSTOCK su
inner join STOCK_TO_BADSTOCK_DETAILS sd
on  su.STOCK_TO_BADSTOCK_INVOICE_NO=sd.STOCK_TO_BADSTOCK_INVOICE_NO 
and su.COMPANY_ID=sd.COMPANY_ID and su.BRANCH_ID=sd.BRANCH_ID
where 
 --(CAST(CONVERT(varchar,su.MAKE_DT, 106) AS datetime) BETWEEN 
--(CAST(CONVERT(varchar,@FROM_DATE, 106) AS datetime)) AND 
--(CAST(CONVERT(varchar,@TO_DATE, 106) AS datetime))) AND

su.CANCEL_FLAG=0 and su.COMPANY_ID=@COMPANY_ID and sd.BRANCH_ID=@BRANCH_ID 

)badstock
on p.PRODUCT_CODE=badstock.PRODUCT_CODE

group by p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY,p.COMPANY_ID,p.BRANCH_ID
)e

on d.PRODUCT_CODE=e.PRODUCT_CODE
and
d.COMPANY_ID =e.COMPANY_ID and d.BRANCH_ID=e.BRANCH_ID




--  damage to stock table
inner join
(
select 
p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY ,
ISNULL(SUM(badstock.DAMAGE_TO_STOCK_QUANTITY),0)TOTAL_DAMAGE_TO_STOCK_QUANTITY,
ISNULL(SUM(TOTAL_STOCK_OUT_PRICE),0)TOTAL_STOCK_OUT_PRICE
,p.COMPANY_ID,p.BRANCH_ID
from
PRODUCT p
left outer join 
(
select su.BADSTOCK_TO_STOCK_INVOICE_NO,sd.PRODUCT_CODE,
ISNULL(sd.QUANTITY,0) as DAMAGE_TO_STOCK_QUANTITY,
0 TOTAL_STOCK_OUT_PRICE 
from BADSTOCK_TO_STOCK su
inner join BADSTOCK_TO_STOCK_DETAILS sd
on  su.BADSTOCK_TO_STOCK_INVOICE_NO=sd.BADSTOCK_TO_STOCK_INVOICE_NO 
and su.COMPANY_ID=sd.COMPANY_ID and su.BRANCH_ID=sd.BRANCH_ID
where 
 --(CAST(CONVERT(varchar,su.MAKE_DT, 106) AS datetime) BETWEEN 
--(CAST(CONVERT(varchar,@FROM_DATE, 106) AS datetime)) AND 
--(CAST(CONVERT(varchar,@TO_DATE, 106) AS datetime))) AND

su.CANCEL_FLAG=0 and su.COMPANY_ID=@COMPANY_ID and sd.BRANCH_ID=@BRANCH_ID 

)badstock
on p.PRODUCT_CODE=badstock.PRODUCT_CODE

group by p.PRODUCT_NAME,p.PRODUCT_CODE,p.STOCK_QUANTITY,p.COMPANY_ID,p.BRANCH_ID
)f

on e.PRODUCT_CODE=f.PRODUCT_CODE
and
e.COMPANY_ID =f.COMPANY_ID and e.BRANCH_ID=f.BRANCH_ID





)aa






---where ((aa.PRODUCT_CODE=@PRODUCT_CODE) OR (@PRODUCT_CODE=''))
--and ((@AVAIABLE_STOCK=1 and aa.STOCK_QUANTITY !=0 and aa.CURRENT_STOCK_QUANTITY != 0) or @AVAIABLE_STOCK=0)
--and ((@NOT_SAME=1 and aa.STOCK_QUANTITY != aa.CURRENT_STOCK_QUANTITY) or @NOT_SAME=0)
--and aa.COMPANY_ID = @COMPANY_ID and aa.BRANCH_ID = @BRANCH_ID









WHERE 
PRODUCT.PRODUCT_CODE = aa.PRODUCT_CODE and
PRODUCT.PRODUCT_CODE=@PRODUCT_CODE AND PRODUCT.BRANCH_ID=@BRANCH_ID
AND PRODUCT.COMPANY_ID=@COMPANY_ID

--update PRODUCT_SERIAL set SALES_STATUS=1
-- where PRODUCT_SERIAL in (select PRODUCT_SERIAL
--  from 
--  SALES_PRODUCT_SERIAL)